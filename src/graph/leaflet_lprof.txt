# Input topology/trajectory: 63342lip_576TMprotein_nowat_start.gro 63342lip_576TMprotein_nowat_10us_1us_timestep_fixed.xtc
# Head group atom selection: name P*
# Number of lipids:          44316
# Number of phosphates (P):  50652
# [time(ps)] [N_leaflets] [N_lipids for the top 5 leaflets]
1000000.0   3 23832 20483     1
2000000.0   7 23832 20479     1     1     1
3000000.0   4 23832 20482     1     1
4000000.0   2 23832 20484
5000000.0   4 23832 20481     2     1
6000000.0   4 23831 20483     1     1
7000000.0   4 23832 20482     1     1
8000000.0   3 23832 20483     1
9000000.0   3 23832 20483     1
10000000.0   5 23832 20481     1     1     1
Wrote profile results to lprof.txt
Timer unit: 1e-06 s

File: ../../leafletformation_p.py
Function: leafletFinder at line 19
Total time: 311.89 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    19                                           @profile
    20                                           def leafletFinder(atoms, cutoff=16.0, box=None, Nmax=None, adj=None):
    21                                               """Basic version of LeafletFinder
    22                                           
    23                                               :Arguments:
    24                                                 * atoms: AtomGroup (eg phosphates)
    25                                                 * cutoff: treat atoms within *cutoff* Angstrome 
    26                                                           as adjacent  [16.0]
    27                                                 * box: unitcell if periodic boundaries should be taken
    28                                                        into account; ``None`` will ignore PBC
    29                                                        [None]
    30                                                 * Nmax: for DEBUGGING: only take the top Nmax x Nmax adjacency matrix;
    31                                                      set to ``None`` for all. [None]
    32                                                      
    33                                                      Use this parameter to test how the implementation behaves
    34                                                      for larger and larger problem sizes.
    35                                           
    36                                                      .. warning:: Any Nmax != None will lead to **wrong results**
    37                                                                   because you arbitrarily throw away data. This is 
    38                                                                   *only* meant for testing/debugging where you want
    39                                                                   to find out if the algorithm runs at all.
    40                                           
    41                                                 * adj: provide adjacency matrix instead of calculating it
    42                                                        (useful for interactive use to speed up multiple runs
    43                                                        with different Nmax values... see warning there!)
    44                                           
    45                                               :Returns: AtomGroups of leaflets
    46                                               """
    47        10           33      3.3      0.0      if adj is None:
    48        10        66544   6654.4      0.0          x = atoms.positions
    49                                                   # could optimize by having self_distance_array return a full NxN matrix
    50                                                   # instead of a 1D list (resorting into NxN in python is far too slow!)
    51                                                   # serial version:
    52                                                   ##adj = (MDAnalysis.core.distances.distance_array(x, x, box=box) < cutoff)
    53                                                   # threaded (parallel version):
    54        10     58689221 5868922.1     18.8          adj = (MDAnalysis.core.parallel.distances.distance_array(x, x, box=box) < cutoff)
    55                                           
    56                                               # DEBUGGING: with Nmax != None: only take a part of the matrix to see how
    57                                               #            how the code behaves for smaller problem sizes
    58        10           78      7.8      0.0      adjk = adj if Nmax is None else adj[:Nmax, :Nmax] 
    59        10    243009076 24300907.6     77.9      graph = nx.Graph(adjk)
    60        10      4346636 434663.6      1.4      subgraphs = nx.connected_components(graph)
    61        49        83597   1706.1      0.0      indices = [np.sort(g) for g in subgraphs]
    62        49      5694698 116218.3      1.8      return [atoms[group].residues for group in indices]

